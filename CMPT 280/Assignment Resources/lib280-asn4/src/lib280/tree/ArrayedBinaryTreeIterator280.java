package lib280.tree;

import lib280.base.LinearIterator280;
import lib280.exception.AfterTheEnd280Exception;
import lib280.exception.ContainerEmpty280Exception;
import lib280.exception.NoCurrentItem280Exception;

public class ArrayedBinaryTreeIterator280<I> extends ArrayedBinaryTreePosition280 implements LinearIterator280<I> {

	// This is a reference to the tree that created this iterator object.
	ArrayedBinaryTree280<I> tree;
	
	// An integer that represents the cursor position is inherited from
	// ArrayedBinaryTreePosition280.
	
	/**
	 * Create a new iterator from a given heap.
	 * @param t The heap for which to create a new iterator.
	 */
	public ArrayedBinaryTreeIterator280(ArrayedBinaryTree280<I> t) {
		super(t.currentNode);
		this.tree = t;
	}

	// TODO - Complete the following methods which are required by LinearIterator280<I>
	// Note that these method stubs were automatically generated by IntelliJ and every one of them
	// requires your attention.

	/**
	 * Tests if the current position is before the start of the structure
	 * @return True if the position is before the start, false otherwise.
	 */
	@Override
	public boolean before() {
		return this.currentNode == 0;
	}

	/**
	 * The current item.
	 * @precond The position is at a valid item.
	 * @return Returns the item at the current position if there is one.
	 * @throws NoCurrentItem280Exception when the current position is not at a valid item.
	 */
	@Override
	public I item() throws NoCurrentItem280Exception {
		if(!tree.itemExists()) {
			throw new NoCurrentItem280Exception("There is no current item.");
		} else
			return tree.item();
	}

	/**
	 * Tests if the current position is after the end of the structure.
	 * @return True if the position is after the end, false otherwise.
	 */
	@Override
	public boolean after() {
		return this.currentNode > tree.count();
	}

	/**
	 * Test whether or not there is a current item.
	 * @return True if there is, false otherwise.
	 */
	@Override
	public boolean itemExists() {
		return tree.itemExists();
	}

	/**	Advance one item in the data structure.
	 * @precond  !after()
	 * @throws AfterTheEnd280Exception if the cursor is already in the after position and cannot be advanced.
	 */
	@Override
	public void goForth() throws AfterTheEnd280Exception {
		if(this.after()) {
			throw new AfterTheEnd280Exception("Can't go any further, after the end.");
		}

		this.currentNode++;
	}

	/**
	 * Go to the first item in the structure.
	 * @precond !itemExists() && this.currentNode == 1
	 * @throws ContainerEmpty280Exception if this container is empty.
	 */
	@Override
	public void goFirst() throws ContainerEmpty280Exception {
		if(!this.itemExists() && this.currentNode == 1) {
			throw new ContainerEmpty280Exception("The container is empty.");
		}

		this.currentNode = 1;
	}

	/**
	 * Move to the position prior to the first element in the structure.
	 */
	@Override
	public void goBefore() {
		this.currentNode = 0;
	}

	/**
	 * Move to the position after the last element in the structure.
	 */
	@Override
	public void goAfter() {
		this.currentNode = tree.count() + 1;
	}

}
