Sean Robson-Kullman
skr519
11182480
Matthew Mulenga
mam558
11144528

We need to create a program that generates x threads. So we'll start off by
getting input from the arguments. We need to validate the input data to make
sure it's the right type of data. This means we need positive integers for
'threads' 'deadline' 'size'. We create a loop which executes a function which
creates a thread which in turn creates child threads which each run a square
function to to calculate all the squares of the first 'size' integers within
a given 'deadline'. We also have a global variable called 'keepRunning'
initialized to true, which is checked by 'child_thread'. Files should be split
into OS-agnostic and OS-specific code. All the functions in the OS-specific
implementations achieve the same thing the only differences are how these
things are achieved.

partA.c - OS-agnostic implementation
partA1.c - Windows Threads Implementation
partA2.c - UBC pthreads Implementation

parent_thread(num_threads, deadline, int_size)
Pre:	num_threads - Integer
			deadline - Integer
			int_size - Integer
Post:	Loops 'num_threads' amount of times and creates a child process on each
			iteration passing 'size' as an argument. Sleeps until deadline, tells
			any children that are still running to exit on wake. Also creates
			an array that stores thread IDs and their 'square()' execution counts.


child_thread(index)
Pre:	index - Integer
Post:	Execute the square function passing it the given index as an argument.
			Outputs runtime and number of square() calls a thread performed if
			the thread ran past the deadline. The child also returns the thread ID,
			the amount of time it took the thread to finish it's task, and the time
			elapsed. If the thread is signaled to exit it still prints all the info.


square(N)
Pre:	N - Integer
Post:	Return the square of N without using multiplication. Square will check
			to see if the parent thread has set the keepRunning value to false.
			It also increments the count of how many times it has been called.
