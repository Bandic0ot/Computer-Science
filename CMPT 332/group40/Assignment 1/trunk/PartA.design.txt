We need to create a program that generates x threads. So we'll start off by
getting input from the arguments. We need to validate the input data to make
sure it's the right type of data. This means we need positive integers for
'threads' 'deadline' 'size'. We create a loop which executes a function which
creates a thread which in turn creates child threads which each run a square
function to to calculate all the squares of the first 'size' integers within
a given 'deadline'. We also have a global variable called 'keepRunning'
initialized to true, which is checked by 'child_thread'. Files should be split
into OS-agnostic and OS-specific code.

parent_thread(num_threads, sleep_length)
Pre:	num_threads - Integer
			sleep_length - Integer
			size - Integer
Post:	Loops 'num_threads' amount of times and creates a child process on each
			iteration passing 'size' as an argument. Sleeps until deadline, tells
			any children that are still running to exit on wake.


child_thread(index)
Pre:	index - Integer
Post:	Execute the square function passing it the given index as an argument.
			Checks 'keepRunning', if false exit thread.


square(N)
Pre:	N - Integer
Post:	Return the square of N without using multiplication.
