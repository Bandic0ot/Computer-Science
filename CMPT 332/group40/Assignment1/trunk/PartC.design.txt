Sean Robson-Kullman
skr519
11182480
Matthew Mulenga
mam558
11144528

	Our code throught the use of two global variables,
there will be a memory allocated to each that will contain the lists
and nodes.  The lists, will be handed out to the user one at a time,
when it calls createList(). In this way, the distribution of resources
can be controled from behind the scenes. The memory is only allocated
the first time that the function is called, otherwise the function
returns a previously existing list that is empty and in wait for use.
Currently, if all the nodes/lists have been used up, the function will 
return a value indicating failure. The adding of nodes, relies heavily 
on the swapping of pointers. For all the specific functionalities, they 
are deffined under the function specific header.

	Did not complete the bonus.
The plan was to continue using the createList() function to add space to 
ether the node or list depending on what was in need. This would have required
the assistance of two more variables that are seen in the document that 
contained the minimum size to increase by for nodes and lists. This did
not end up getting implemented, but would have been beautiful!



struct NODE{
    void *item;
    NODE *next;
    NODE *prev;
}

struct LIST{
    NODE *head;
    NODE *cur;
    NODE *tail;
    int size;
}
struct LIST *EMPTYLIST;
struct NODE *EMPTYNODE;


//LIST *listCreate()
//pre: nothing
//post: makes an new, empty list, and returns its reference on success.
// Returns a NULL pointer on failure, else the newly created list.

	Allocated memory, is the only place that malloc() is called.


//int listCount(LIST list)
//pre: list- List*
//post: returns the number of items list pointer.

	Ether keeps tally of the number of nodes, or counts each node
individually.


//void *listFirst(LIST list)
//pre: list- LIST*
//post: returns a pointer to the first item and makes the first item
    the current item.

	return head, change cur pointer


//void *listLast(LIST list)
//pre: list- LIST*
//post: returns a pointer to the last item and makes the last item the
        current item.

	Return tail, change cur pointer


//void *listNext(LIST list)
//pre: list- LIST*
//post: Advances the list current item by one, and returns a pointer
        to the new current item. If this tries to advance past the
        end of the list, return NULL.

	Use the pointer next, in the current node. change cur pointer


//void *listPrev(LIST list)
//pre: list- LIST*
//post: backs up lists current item by one, and returns a pointer
        to the new current item. If this tries to advance past the
        end of the list, return NULL.

	User the pointer prev, change cur pointer


//void *listCur(LIST list)
//pre: list- LIST*
//post: returns a pointer to the current item int the list.

	Return current.


//int listAdd(list,item)
//pre: list - LIST*
//      item - void*
//post: adds the new item to the list directly after the current item,
        and makes the inserted item the current item. if the current
        pointer is at the end of the list, the item is added at the end.
        Return 0 on success, -1 on failure.

	Add using new node, and swap pointers. change cur pointer


//int listInsert(list, item)
//pre: list - LIST*
//      item - void*
//post: adds item to the list directly before the current item, and makes
            the new item the current one. if the current pointer is at the
            start of the list, the item is added at the end.
//return:   success = 0
//          failure = -1

add using new node, and swap pointers. change cur pointer


//int listAppend(list, item)
//pre: list - LIST*
//      item - void*
//post: adds item to the end of the list, and makes the new item the
        current one.
//return:   success = 0
//          failure = -1

	Checks input, changes the current pointer to the list tail,
and calls listAdd()

//int listPrepend(list, item)
//pre: list - LIST*
//      item - void*
//post: adds item to the front of the list, and makes the new item the
        current one.
//return:   success = 0
            failure = -1

         Checks input,changes the current pointer to the list tail,
and calls listInsert().



//void *listRemove(list)
//pre: list - LIST*
//post: return current item, and take it out of the list.
        Make the next item the current one.
//return: current item.

	Use a temp var for the next var, and then swap pointers to remove
the cur pointer. change cur pointer


// void listConcat(list1,list2)
// pre: list1 - LIST*
//      lsit2 - LIST*
// post: adds list2 to the end of list1. the current pointer is set to the
            current pointer of list1. list2 nolonger exists after operation.
//return: nothing

tail1 = head2.


//void listFree(list,listFree)
//pre: list1 - LIST*
//      list2 - LIST*
//post: delete item. itemFree is a pointer to a routine tha frees an item.
        It should be invoked(within listFree) as: (*itemFree)(itemToBeFreed);
//return: nothing.

delete, change cur pointer


//void *listTrim(list)          //list_removers
//pre: list - LIST*
//post: take last item out of the list, the current pointer shall be the
        new last item in the list.
//return: the last item.

use previous fuction on the tail.


//void *listSearch(list, comparator, comparasonArg)
//pre: list - LIST*
//      comparator - function pointer
//      comparasonArg - void*
//post: searches list starting at the current item, until ether a match is
        found, or the end of the list is reached. pointer is left at the
        matched item or the end of the list.
//return: if no match found, return NULL. else, return pointer to the item
            that was found.

use the provided fuction pointer to compare two items, and start at the current
element, and step forward in the list until you find a match or hit the end of the list.
