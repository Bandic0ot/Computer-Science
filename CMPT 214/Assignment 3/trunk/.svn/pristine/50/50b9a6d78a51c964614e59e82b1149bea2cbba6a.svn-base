// Matthew Mulenga
// mam558
// 11144528

// -------- Headers --------

#include <assert.h> // For assert()
#include <stdlib.h> // For EXIT_SUCCESS

#include "vector.h" // For Vector, alloc_vec(), extend_vec(), dealloc_vec()
#include "scalar.h" // For scalar_plus(), scalar_minus(), 
					// scalar_mult, scalar_div()

// -------- Variables --------

const float TEST_FLOAT_1 = 5.00; 
const float TEST_FLOAT_2 = 8.00;
const float TEST_FLOAT_3 = 2.50;

// -------- Methods --------

// Unit tests for scalar_plus() method.
void test_scalarPlus() {
	Vector *v1 = alloc_vec();
    Vector *v2 = extend_vec(v1, TEST_FLOAT_1);
    
    //Add values to the two vectors using the scalar_plus() method.
    Vector *v2plus = scalar_plus(v2, TEST_FLOAT_3);
	
	// Test to see scalar_plus() by adding 2.50 to the element.
	// Should result in 7.50.
	assert(NULL != v2plus); // Make sure the function succeeded.
	
	assert(NULL != v2->array); // Make sure the vector is still valid.
    
    assert(1 == v2->size);	// Make sure the vector structure is still 
    						// the same size.
    
	assert(7.50 == v2plus->array[0]); // Make sure the stored value is correct.
    
    // Free the memory used by all the vectors.
    dealloc_vec(v1);
    dealloc_vec(v2);
} 

// Unit test for scalar_minus() method.
void test_scalarMinus() {
	Vector *v1 = alloc_vec();
    Vector *v2 = extend_vec(v1, TEST_FLOAT_1);
    
    //Add values to the two vectors using the scalar_plus() method.
    Vector *v2minus = scalar_minus(v2, TEST_FLOAT_2);
	
	// Test scalar_minus() by subtracting 2.00 from the element.
	// Should result in -3.00
	assert(NULL != v2minus); // Make sure the function succeeded.
	
	assert(NULL != v2->array); // Make sure the vector is still valid.
    
    assert(1 == v2->size);	// Make sure the vector structure
    						// is still the same size.
    
	assert(-3.00 == v2minus->array[0]); // Make sure the stored 
										// value is correct.
    
    // Free the memory used by all the vectors.
    dealloc_vec(v1);
    dealloc_vec(v2);
}

// Unit test for scalar_mult() method.
void test_scalarMult() {
	Vector *v1 = alloc_vec();
    Vector *v2 = extend_vec(v1, TEST_FLOAT_1);
    
    //Multiply vector by the given float using the scalar_mult() method.
    Vector *v2mult = scalar_mult(v2, TEST_FLOAT_2);
	
	// Test scalar_mult() by multiplying the vector by 8.00.
	// Should result in 40.00
	assert(NULL != v2mult); // Make sure the function succeeded.
	
	assert(NULL != v2->array); // Make sure the vector is still valid.
    
    assert(1 == v2->size);	// Make sure the vector structure 
    						// is still the same size.
    
	assert(40.00 == v2mult->array[0]);	// Make sure the stored 
										// value is correct.
    
    // Free the memory used by all the vectors.
    dealloc_vec(v1);
    dealloc_vec(v2);
}

// Unit test for scalar_div() method.
void test_scalarDiv() {
	Vector *v1 = alloc_vec();
    Vector *v2 = extend_vec(v1, TEST_FLOAT_1);
    
    //Divide vector by the given float using the scalar_div() method.
    Vector *v2div = scalar_div(v2, TEST_FLOAT_3);
	
	// Test scalar_div() by dividing the vector by 2.50.
	// Should result in 2.00
	assert(NULL != v2div); // Make sure the function succeeded.
	
	assert(NULL != v2->array);	// Make sure the vector is still valid.
    
    assert(1 == v2->size);	// Make sure the vector structure 
    						// is still the same size.
    
	assert(2.00 == v2div->array[0]); // Make sure the stored value is correct.
    
    // Free the memory used by all the vectors.
    dealloc_vec(v1);
    dealloc_vec(v2);
}


// main:
//  Program entry point
// In:
//  argc > 0
//  argv[0 .. argc-1] != NULL
// Out:
//  return -- EXIT_SUCCESS if program terminates normally, 
//            EXIT_FAILURE otherwise
int main(int, char **) {

	// Run the tests for all the functions.
	test_scalarPlus();
	test_scalarMinus();
	test_scalarMult();
	test_scalarDiv();
    
    return EXIT_SUCCESS;
}
    